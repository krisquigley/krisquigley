<!doctype html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
<meta charset="utf-8">

<!-- Always force latest IE rendering engine or request Chrome Frame -->
<meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">

<!-- Use title if it's in the page YAML frontmatter -->
<title>Bits &amp; Bytes - Kris Quigley - Ruby on Rails Developer</title>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

<link href="/stylesheets/paper.min-fa4b3427.css" rel="stylesheet" /><link href="/stylesheets/highlight-15c4871c.css" rel="stylesheet" /><link href="/stylesheets/all-13a717df.css" rel="stylesheet" />
<script src="/javascripts/all-da39a3ee.js"></script>
<link rel="alternate" type="application/atom+xml" title="Atom Feed" href="/feed.xml" />

<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" href="/favicon-32x32.png" sizes="32x32">
<link rel="icon" type="image/png" href="/favicon-16x16.png" sizes="16x16">
<link rel="manifest" href="/manifest.json">
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
<meta name="theme-color" content="#ffffff">
  </head>
  <body>
      <header>
    <nav class="navbar navbar-default">
      <div class="container-fluid">
        <div class="navbar-header">
          <a class="navbar-brand" href="/">Kris Quigley</a>
        </div>
      </div>
    </nav>
  </header>
    <div class="container">
      <main>
        <div class="row">
  <div class="col-xs-12 site">
    <h1 class="site__heading">Bits &amp; Bytes</h1>
    <hr class="site__rule">
  </div>
</div>
        <div class="row">
          <?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-02-17T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Replacing the asset pipeline with Webpack 2 in Rails</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/17/replacing-the-asset-pipeline-with-webpack-2-in-rails.html"/>
    <id>http://blog.url.com/2017/02/17/replacing-the-asset-pipeline-with-webpack-2-in-rails.html</id>
    <published>2017-02-17T00:00:00+00:00</published>
    <updated>2017-02-17T21:34:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Other than Rails devs, no one else uses sprockets as far as I&amp;rsquo;m aware, and so it is a very small ecosystem used by a small subset of devs.  Therefore, if we want to get these libraries working in Rails, then we either have to port them to sprockets and maintain them ourselves, or hope that someone else within the community will do it for us.&lt;/p&gt;

&lt;p&gt;This is why, to me, it feels best if we can use a system which is more actively developed, supported and used by a larger group of users.  Thus, reducing the lead time for implementing the latest front-end libraries and technologies and having access to a greater pool of knowledge and skills.&lt;/p&gt;

&lt;p&gt;With this in mind, our options end up being Gulp, Grunt or Webpack.&lt;/p&gt;

&lt;h4&gt;Why Webpack?&lt;/h4&gt;

&lt;p&gt;I have chosen Webpack for my future projects.  Why? Because it is currently becoming the biggest and most popular bundler for frontend assets.  Sorry I don&amp;rsquo;t have any hard metrics for you right now, this is based on my feeling from how the frontend community is responding to it.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t check comparison tables to see which was the best for my needs, rather, I prefer to go with the most popular approach within the community at any time, as there will be better support for the technology and will be more actively developed, this means using Webpack.&lt;/p&gt;

&lt;p&gt;Additionally, this is what React use for the bootstrapping app &lt;a href="https://github.com/facebookincubator/create-react-app"&gt;create-react-app&lt;/a&gt; and let&amp;rsquo;s face it; React is awesome.&lt;/p&gt;

&lt;h4&gt;Rails 5.1&lt;/h4&gt;

&lt;p&gt;My decision was further supported by the news that Rails 5.1 will be shipping with both the asset pipeline and Webpack for managing assets.  Webpack (at the time of writing) will only be utilised for JS assets.&lt;/p&gt;

&lt;p&gt;I, on the other hand, will be using Webpack for serving all assets in this article.&lt;/p&gt;

&lt;h3&gt;Implementing Webpack&lt;/h3&gt;

&lt;h4&gt;Preparing Rails&lt;/h4&gt;

&lt;p&gt;To begin with, we will need to disable the asset pipeline in Rails.&lt;/p&gt;

&lt;p&gt;If you are starting a new project from scratch using &lt;code&gt;rails new&lt;/code&gt; then you can pass the argument &lt;code&gt;--skip-sprockets&lt;/code&gt; to disable the asset pipeline from the get go.&lt;/p&gt;

&lt;p&gt;Otherwise, If you are migrating an existing app to Webpack then you will need to disable sprockets manually.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;application.rb&lt;/code&gt; file you can disable it by commenting out the line &lt;code&gt;require &amp;quot;sprockets/railtie&amp;quot;&lt;/code&gt;.  However, you might have the line &lt;code&gt;require &amp;quot;rails/all&lt;/code&gt; instead, in that case you can replace that line with the following below:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rails"&lt;/span&gt;
&lt;span class="c1"&gt;# Pick the frameworks you want:&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_model/railtie"&lt;/span&gt;
&lt;span class="c1"&gt;# require "active_job/railtie"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_record/railtie"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"action_controller/railtie"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"action_mailer/railtie"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"action_view/railtie"&lt;/span&gt;
&lt;span class="c1"&gt;# require "action_cable/engine"&lt;/span&gt;
&lt;span class="c1"&gt;# require "sprockets/railtie"&lt;/span&gt;
&lt;span class="c1"&gt;# require "rails/test_unit/railtie"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be sure not to comment out any of the frameworks above which you actually need!&lt;/p&gt;

&lt;p&gt;Now you will need to go through each of your environment files (production.rb, etc) to comment out any references to &lt;code&gt;assets&lt;/code&gt; if there are any, additionally, comment out all lines in your &lt;code&gt;assets.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Furthermore, you can now also rip out any gems you needed for assets from your &lt;code&gt;Gemfile&lt;/code&gt;! (Be sure to write them down though so that you can replace them with the same NPM modules later.)&lt;/p&gt;

&lt;h4&gt;Using Yarn&lt;/h4&gt;

&lt;p&gt;Another hot tool within the JS community right now is Yarn.  Yarn is a replacement for NPM which offers faster installations and increased security. As of writing, Yarn is unable to do everything that NPM can currently do, but supports all the same packages.&lt;/p&gt;

&lt;p&gt;If you are unsure whether or not Yarn does everything you need, then I recommend checking the &lt;a href="https://yarnpkg.com/en/docs/migrating-from-npm"&gt;migration docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the purpose of this article, I will be installing packages using Yarn, but you can easily follow along if you prefer to use NPM instead.&lt;/p&gt;

&lt;h4&gt;Installing Webpack&lt;/h4&gt;

&lt;p&gt;With that out of the way, we can now begin to install Webpack.  First traverse to your project folder and run &lt;code&gt;yarn global add webpack&lt;/code&gt;.  This will then add Webpack to our path so that we can run it anywhere. &lt;/p&gt;

&lt;p&gt;At the time of this article, the latest version of Webpack is &lt;code&gt;2.2.1&lt;/code&gt; and so the configuration that follows will be relevant to that version of Webpack.  Many things have changed since v1.0 and may continue to change in the future.  So if you have come to this article from a time where v2.2.1 is considered very old, then your mileage may vary. &lt;/p&gt;

&lt;p&gt;Before we start installing a gazillion node modules, I would recommend adding &lt;code&gt;/node_modules&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; at this point.&lt;/p&gt;

&lt;p&gt;Now might also be a good time to add our future compiled assets to &lt;code&gt;.gitignore&lt;/code&gt;, too.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/public/javascripts
/public/stylesheets
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using Webpack in development&lt;/h3&gt;

&lt;p&gt;Webpack comes with a watch mode which will automatically recompile your assets if it detects a change in the filesystem by passing the flag &lt;code&gt;w&lt;/code&gt;.  Therefore, in development we will be running Webpack as such: &lt;code&gt;webpack -w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You could easily add this as another service in Foreman or in Docker, so that it is always running in the background when you boot up your app in development.&lt;/p&gt;

&lt;h3&gt;Using Webpack to serve JS&lt;/h3&gt;

&lt;p&gt;Now comes the fun part, we are going to start configuring Webpack to serve our JS assets.&lt;/p&gt;

&lt;h4&gt;Replacing Coffeescript with ES6&lt;/h4&gt;

&lt;p&gt;First we are going to begin with transpiling all of our &lt;code&gt;.coffee&lt;/code&gt; files into ES6.  For me, the biggest reason for us to be migrating from the asset pipeline to Webpack is so that we can drop coffeescript, which is pretty much obsolete now &lt;em&gt;trollface&lt;/em&gt;, and start using the latest syntax and functions from ES6 and onwards without headaches. &lt;/p&gt;

&lt;p&gt;For this, I recommend using &lt;a href="http://decaffeinate-project.org/repl/"&gt;Decaffeinate&lt;/a&gt; as a quick way of getting some ok-ish ES6 code which we can refactor later. &lt;/p&gt;

&lt;h4&gt;Adding babel&lt;/h4&gt;

&lt;p&gt;Now that we have our ES6 code in place, we need to start configuring Webpack to transpile our ES6 into ES5 for full browser support.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go ahead and add the packages we need for ES6 support.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add babel-core babel-loader babel-polyfill babel-preset-es2015&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering what the &lt;code&gt;babel-loader&lt;/code&gt; package is all about, this will enable Webpack to transpile ES6 using babel.  I will go into this further, shortly.&lt;/p&gt;

&lt;p&gt;Yarn will then go ahead and create us a &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;yarn.lock&lt;/code&gt; file.  These are comparable to &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Now we need to create the file &lt;code&gt;webpack.config.js&lt;/code&gt; in the root of our project to configure Webpack to our needs.&lt;/p&gt;

&lt;p&gt;First we are going to define some libraries that we will need throughout our config file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we are going to define where we want our compiled JS to be exported to:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsOutputTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'javascripts/application.js'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next comes all the juicy details which we will be defined within an object:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Juicy details&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first key will be our &lt;code&gt;context&lt;/code&gt;, in which we tell Webpack where we want it to look when we are defining our &lt;code&gt;entry&lt;/code&gt; points.  &lt;code&gt;entry&lt;/code&gt; points are where Webpack will begin to read the assets that we want it to transpile.  In this case, I will be following the same directory structure that the asset pipeline uses for JS and CSS.  This is purely to stick to Rails conventions and to make life easier for current Rails developers:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/app/assets'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'./javascripts/application.js'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next key is our output path, where we would like Webpack to save our assets to once they have been transpiled.  We will be referencing our previous &lt;code&gt;jsOutputTemplate&lt;/code&gt; constant here.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/public'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jsOutputTemplate&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, in the &lt;code&gt;module&lt;/code&gt; key we are going to add another object with the key &lt;code&gt;loaders&lt;/code&gt; in order to define which loaders we want to use.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'babel-loader'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'es2015'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, we are using the &lt;code&gt;babel-loader&lt;/code&gt; to transpile any JS files from es2015, i.e. ES6.&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;webpack.config.js&lt;/code&gt; file should now look something like this:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import external libraries&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Define our compiled asset files&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsOutputTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'javascripts/application.js'&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Remove this if you are not using Docker&lt;/span&gt;
  &lt;span class="na"&gt;watchOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;aggregateTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// Define our asset directory&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/app/assets'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="c1"&gt;// What js / CSS files should we read from and generate&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'./javascripts/application.js'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// Define where to save assets to&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/public'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jsOutputTemplate&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// Define how different file types should be transpiled&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'babel-loader'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'es2015'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test that everything is working correctly, make sure you have Webpack fired up with &lt;code&gt;webpack -w&lt;/code&gt; and add the following HTML somewhere:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-behavior=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is my button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we are going to create a module to fire off an alert when the button has been clicked:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"button[data-behavior='alert']"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showAlert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showAlert&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save this under &lt;code&gt;/app/assets/javascripts/modules/alert.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then in our &lt;code&gt;application.js&lt;/code&gt; file we can add the line:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;'./modules/alert'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to remove anything else in your &lt;code&gt;application.js&lt;/code&gt; file, or else you might get compilation errors from Webpack.&lt;/p&gt;

&lt;p&gt;Importing files like this, also allows us to stick to the same conventions as we had with the asset pipeline.&lt;/p&gt;

&lt;p&gt;Now when you boot up Rails you should get an alert pop up once you click on the button!&lt;/p&gt;

&lt;h4&gt;Using jQuery&lt;/h4&gt;

&lt;p&gt;In order enable to jQuery support in Bootstrap, or if you are using some legacy jQuery plugins, then we need to define it as a global function within Webpack.&lt;/p&gt;

&lt;p&gt;For this, we will need to use a plugin to assign the jQuery library to some global variables.  This will sit in a new key within our Webpack config module, aptly named &lt;code&gt;plugins&lt;/code&gt;.  &lt;code&gt;plugins&lt;/code&gt; is defined as an array and as this will be a custom plugin, we need to require the Webpack library.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add this in now:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"webpack"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, after the &lt;code&gt;module&lt;/code&gt; key we are going to add &lt;code&gt;plugins&lt;/code&gt; with our custom jQuery plugin:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProvidePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'jquery'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'jquery'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'window.jQuery'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'jquery'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, let&amp;rsquo;s make sure we have jquery installed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add jquery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your jQuery scripts should now work as expected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another important point&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Should you wish to continue using UJS, then we will need to install the module and import it into our assets.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add jquery-ujs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then we can add the following line to our &lt;code&gt;application.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;'jquery-ujs'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Adding React&lt;/h4&gt;

&lt;p&gt;Now that we are running Webpack, it makes it very easy for us to start adding React components throughout the project, if this is something which you feel your project would benefit from of course.&lt;/p&gt;

&lt;p&gt;Simply install React: &lt;code&gt;yarn add react react-dom babel-preset-react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then tell babel to transpile our React code by adding &lt;code&gt;react&lt;/code&gt; as another preset:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;node_modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'babel-loader'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'es2015'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using Webpack to serve CSS&lt;/h3&gt;

&lt;p&gt;By default, Webpack compiles everything into JS, which may or may not be a good thing.  For us traditional asset pipeline devs, we might be like WTF, where did all of my CSS files just go?!&lt;/p&gt;

&lt;p&gt;In this case, and the assumption for the rest of the article, we will need to tell Webpack to extract them out into their own files using a plugin.&lt;/p&gt;

&lt;p&gt;For this plugin, &lt;code&gt;extract-text-webpack-plugin&lt;/code&gt;, we will however need to define which version to use as the current 1.x stable branch does not support Webpack 2 (the release candidates also currently break &lt;code&gt;bootstrap-loader&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add extract-text-webpack-plugin@v2.0.0-beta.5 css-loader sass-loader&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With that installed, we can now add the plugin to our config file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExtractTextPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"extract-text-webpack-plugin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssOutputTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'stylesheets/application.css'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cssOutputTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;allChunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="c1"&gt;// Define where to save the CSS file&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to define our CSS file in our entry points. &lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./javascripts/application.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"./stylesheets/application.sass"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example I will be using SASS, for which we will also need a loader in order to transpile our SASS into CSS.  If you are only using plain CSS however, then you will only need the &lt;code&gt;css-loader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add css-loader sass-loader node-sass&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s add in our new loaders:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'css-loader'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;sass$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'css-loader'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sass-loader'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Bootstrap&lt;/h4&gt;

&lt;p&gt;Getting Bootstrap set up and working was quite a major undertaking, I have boiled down here, what took many hours of trial and error.  Hopefully this will save you a lot of time.&lt;/p&gt;

&lt;p&gt;For this article, we will be using the &lt;code&gt;bootstrap-loader&lt;/code&gt; package, so let&amp;rsquo;s go ahead and install it, including it&amp;rsquo;s dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add bootstrap-loader bootstrap-sass css-loader node-sass resolve-url-loader sass-loader style-loader url-loader imports-loader file-loader&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next we need to update our entry point to use &lt;code&gt;bootstrap-loader&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'bootstrap-loader'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'./javascripts/application.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'./stylesheets/application.sass'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Styles&lt;/h4&gt;

&lt;p&gt;Now we need to create a &lt;code&gt;.bootstraprc&lt;/code&gt; file within the root directory of our project and populate it with the following:&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# Major version of Bootstrap: 3 or 4&lt;/span&gt;
&lt;span class="na"&gt;bootstrapVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;# If Bootstrap version 3 is used - turn on/off custom icon font path&lt;/span&gt;
&lt;span class="na"&gt;useCustomIconFontPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;

&lt;span class="c1"&gt;# Webpack loaders, order matters&lt;/span&gt;
&lt;span class="na"&gt;styleLoaders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;style-loader&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;css-loader&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sass-loader&lt;/span&gt;

&lt;span class="c1"&gt;# Extract styles to stand-alone css file&lt;/span&gt;
&lt;span class="na"&gt;extractStyles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# Usually this endpoint-file contains list of @imports of your application styles.&lt;/span&gt;
&lt;span class="na"&gt;appStyles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./app/assets/stylesheets/application.sass&lt;/span&gt;

&lt;span class="c1"&gt;### Bootstrap styles&lt;/span&gt;
&lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# Mixins&lt;/span&gt;
  &lt;span class="na"&gt;mixins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Reset and dependencies&lt;/span&gt;
  &lt;span class="na"&gt;normalize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;glyphicons&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Core CSS&lt;/span&gt;
  &lt;span class="na"&gt;scaffolding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;grid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;tables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;forms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;buttons&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Components&lt;/span&gt;
  &lt;span class="na"&gt;component-animations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;dropdowns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;button-groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;input-groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;navs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;navbar&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;breadcrumbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;pagination&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;pager&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;badges&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;jumbotron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;thumbnails&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;alerts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;progress-bars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;media&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;list-group&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;panels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;wells&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;responsive-embed&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Components w/ JavaScript&lt;/span&gt;
  &lt;span class="na"&gt;modals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;tooltip&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;popovers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;carousel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Utility classes&lt;/span&gt;
  &lt;span class="na"&gt;utilities&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;responsive-utilities&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;### Bootstrap scripts&lt;/span&gt;
&lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;carousel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;collapse&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;dropdown&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;tooltip&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;popover&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;scrollspy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;tab&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;affix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More options can be found on the &lt;a href="https://github.com/shakacode/bootstrap-loader"&gt;bootstrap-loader&lt;/a&gt; project page.&lt;/p&gt;

&lt;h4&gt;Scripts&lt;/h4&gt;

&lt;p&gt;To enable the various Bootstrap scripts such as modal windows, etc we need to add another loader:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/bootstrap-sass&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;assets&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;javascripts&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'imports-loader?jQuery=jquery'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Fonts&lt;/h4&gt;

&lt;p&gt;In order to render the Bootstrap font icons, we will need to add the following loaders:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;woff2&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;|svg&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'url-loader?limit=10000&amp;amp;name=/fonts/[name].[ext]'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;ttf|eot&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'file-loader?name=/fonts/[name].[ext]'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you should be all good to start using Bootstrap as usual.&lt;/p&gt;

&lt;h3&gt;Using Webpack to serve Images&lt;/h3&gt;

&lt;p&gt;For images, we are going to keep things simple and not use the traditional Rails &lt;code&gt;/app/assets/images/&lt;/code&gt; folder and just go right ahead and place our images directly into &lt;code&gt;/public/images&lt;/code&gt; as that is where Rails expects to find them.&lt;/p&gt;

&lt;p&gt;If you would like to stick to the old convention here, then we can simply update our Webpack config to copy the files across to the &lt;code&gt;public&lt;/code&gt; folder.  Going down this route, also allows us to do some post-processing on the images as we copy them across. For this, I would recommend using &lt;a href="https://github.com/tcoopman/image-webpack-loader"&gt;image-webpack-loader&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Using Webpack on Codeship&lt;/h3&gt;

&lt;p&gt;As we have ignored our compiled assets from being added to our git repo, we will need to configure Codeship to compile our assets before running the test suite.&lt;/p&gt;

&lt;p&gt;Under &amp;lsquo;Test&amp;rsquo; in &amp;lsquo;Project Settings&amp;rsquo; we can add the following lines at the end of our &amp;lsquo;Setup Commands&amp;rsquo;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nvm use 6.9.5
npm install
./node_modules/.bin/webpack --progress --colors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will then compile our assets before running the test suite.&lt;/p&gt;

&lt;h3&gt;Using Webpack in Production&lt;/h3&gt;

&lt;p&gt;For production we want to be able to uglify our assets in order to reduce file size, we can do that with Webpack by passing the flag &lt;code&gt;p&lt;/code&gt;.  We will also want to fingerprint them for Rails and gzip them.&lt;/p&gt;

&lt;p&gt;We can do this by first tracking if the flag &lt;code&gt;p&lt;/code&gt; has been passed to Webpack to enable the aforementioned behaviour:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Capture production argument&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Fingerprinting assets for production&lt;/h4&gt;

&lt;p&gt;As Rails fingerprints assets to ensure that the browser re-downloads assets once they have been changed, we will also need to implement this into Webpack so that Rails can function as usual.&lt;/p&gt;

&lt;p&gt;Now that we are checking for production mode, we can use this to determine the filename of our assets:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define our compiled asset files&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsOutputTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'javascripts/[name]-[hash].js'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'javascripts/[name].js'&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssOutputTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'stylesheets/[name]-[hash].css'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'stylesheets/[name].css'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to generate a file containing our fingerprint in so that Rails can reference it later:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import external libraries&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// output the fingerprint&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ASSET_FINGERPRINT = "'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;
        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'config/initializers/fingerprint.rb'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s set up a helper to read from either the fingerprinted asset or our development asset:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fingerprinted_asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;production?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ASSET_FINGERPRINT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, update our &lt;code&gt;application.html.erb&lt;/code&gt; layout to use our newly created helper:&lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;stylesheet_link_tag&lt;/span&gt;    &lt;span class="n"&gt;fingerprinted_asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;media: &lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;javascript_include_tag&lt;/span&gt; &lt;span class="n"&gt;fingerprinted_asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;async: &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;development?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When Rails boots up it will then use this value to reference our asset files.&lt;/p&gt;

&lt;p&gt;A big thanks goes out to &lt;a href="http://pixelatedworks.com/articles/replacing-the-rails-asset-pipeline-with-webpack-and-yarn/"&gt;Samuel Mullen&lt;/a&gt; for the above fingerprinting approach.&lt;/p&gt;

&lt;h4&gt;Deploying to Heroku&lt;/h4&gt;

&lt;p&gt;Now that we have fingerprinting in place, it means that we can use our app in production.  However, there are still a couple of tweaks to be made in order to get it behaving nicely in Heroku.&lt;/p&gt;

&lt;p&gt;First of which, we will need to tell Heroku to install our node modules and compile our assets before compiling our Rails app.  This requires us to install the &lt;a href="https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app"&gt;Nodejs buildpack&lt;/a&gt; and place it above the Ruby buildpack in the list.&lt;/p&gt;

&lt;p&gt;Make sure that the Nodejs buildpack is listed above the Ruby buildpack as we need Heroku to compile our assets and set the fingerprint before building our Ruby app.&lt;/p&gt;

&lt;p&gt;Next we need to monkey patch &lt;code&gt;rake assets:precompile&lt;/code&gt; and &lt;code&gt;rake assets:clean&lt;/code&gt; as these are no longer needed.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;assets.rake&lt;/code&gt; in your &lt;code&gt;/app/lib/tasks&lt;/code&gt; directory and add the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:assets&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:precompile&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Skipping task as not needed."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:clean&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Skipping task as not needed."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we are going to add the following to our &lt;code&gt;packages.json&lt;/code&gt; file after the &lt;code&gt;dependencies&lt;/code&gt; key:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"heroku-postbuild"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"webpack -p"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Heroku will read this and run Webpack after installing all of our node packages.&lt;/p&gt;

&lt;h4&gt;Compressing assets&lt;/h4&gt;

&lt;p&gt;One very important point for optimising our web sites, is to gzip assets.  This can be achieved very easily in Webpack through the use of the &lt;code&gt;compression-webpack-plugin&lt;/code&gt; &amp;hellip;plugin.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add compression-webpack-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we require the plugin and enable it for static assets if in production mode.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CompressionPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'compression-webpack-plugin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Gzip assets&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compressFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CompressionPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'[path].gz[query]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;algorithm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'gzip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;html$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10240&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;minRatio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;
&lt;span class="p"&gt;})]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we append it to the end of our &lt;code&gt;plugins&lt;/code&gt; array:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compressFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Article code&lt;/h3&gt;

&lt;p&gt;Whilst writing this article, I also built a Rails app to make sure that the code in each step worked correctly.  I have hosted it on github under &lt;a href="https://github.com/krisquigley/webpack-article"&gt;webpack-article&lt;/a&gt;, if you would like to refer to it.&lt;/p&gt;

&lt;p&gt;Your final &lt;code&gt;webpack.config.js&lt;/code&gt; should look like the &lt;a href="https://github.com/krisquigley/webpack-article/blob/master/webpack.config.js"&gt;following&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Sources&lt;/h3&gt;

&lt;p&gt;A lot of this article would not have been possible if it were not for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Samuel Mullen - &lt;a href="http://pixelatedworks.com/articles/replacing-the-rails-asset-pipeline-with-webpack-and-yarn/"&gt;Replacing the Rails Asset Pipeline with Webpack and Yarn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Using Docker For Development</title>
    <link rel="alternate" href="http://blog.url.com/2017/01/22/using-docker-for-development-rails.html"/>
    <id>http://blog.url.com/2017/01/22/using-docker-for-development-rails.html</id>
    <published>2017-01-22T00:00:00+00:00</published>
    <updated>2017-02-08T18:41:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;Why use Docker?&lt;/h3&gt;

&lt;p&gt;If you aren&amp;rsquo;t entirely sure what Docker is exactly, or what benefit it can bring to your work flow.  Then I recommend that you read the article &lt;a href="https://www.airpair.com/docker/posts/8-proven-real-world-ways-to-use-docker"&gt;8 Proven Real-World Ways to Use Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A lot of what I have learnt throughout my experience with Docker has been through the help of the online community, therefore it is only right that I also share the source of those articles and forums which can be found in the references section below.&lt;/p&gt;

&lt;h3&gt;Docker Environment&lt;/h3&gt;

&lt;p&gt;First off, we need to install Docker before we can do anything.  In this article I will only be talking about the now recommended way of installing and running Docker, using Docker for X, &lt;em&gt;where X is the OS&lt;/em&gt; rather than the old approach of using Docker toolbox.&lt;/p&gt;

&lt;p&gt;Please note, if you are running Windows 10 Home, then you will need to be using Docker toolbox rather than Docker for Windows. As Docker for Windows relies on Hyper-V for virtualisation which only Windows 10 Pro provides.  If you can afford it, I recommend upgrading to the Pro version of Windows in this instance, as it is well worth it.&lt;/p&gt;

&lt;h4&gt;Docker for Windows / Mac / Linux&lt;/h4&gt;

&lt;p&gt;With that out of the way, head on over to &lt;a href="https://www.docker.com/products/docker"&gt;Docker&lt;/a&gt; and download Docker for Windows / Mac / Linux.  In this instance, I shall be installing and running Docker for Windows, however, the contents of this document are the same regardless of which OS you are running (hence the beauty of Docker).&lt;/p&gt;

&lt;h4&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;Once you have Docker installed, you are ready to start integrating it into your project, or should I say, integrate your project into Docker&amp;hellip;&lt;/p&gt;

&lt;p&gt;Docker uses what it calls images; images are effectively snapshots of data, be they complete OS&amp;rsquo;s in themselves, services or just files in their own right.  More often than not, images contain a guest OS with minimal libraries/packages installed (in order to keep the weight down) and a preconfigured service for you to use with other Docker images.&lt;/p&gt;

&lt;p&gt;Most official images can be found on Docker&amp;rsquo;s own service called &lt;a href="https://hub.docker.com/explore/"&gt;Docker Hub&lt;/a&gt;, which is akin to GitHub for Git.&lt;/p&gt;

&lt;p&gt;Now, we can either use these images straight out of the box, making no changes to them in order to provide a service for us to interact with, e.g. Redis, Postgres or MongoDB; or we can use it as a base image to build upon.&lt;/p&gt;

&lt;p&gt;We are going to do both, but firstly we are going to take an image as our base image, configure it and build our project into it.  This is where the Dockerfile comes into play.  The Dockerfile is where we define which base image we would like to use, what extra packages we might want to install; copy our project files into and then build it into its own bespoke image to later distribute, if we so wish.&lt;/p&gt;

&lt;h3&gt;Development Dockerfile&lt;/h3&gt;

&lt;p&gt;As this is an article for a Dockerised Rails app, we will be using a Ruby base image to start with.  However, the standard Ruby image is rather bloated with many packages that aren&amp;rsquo;t needed for more projects.  Therefore, we will be using the slim variant and installing any extra packages that we need.&lt;/p&gt;

&lt;p&gt;Create the file, &lt;code&gt;Dockerfile&lt;/code&gt; and save it to the root of your project.  The first line we are going to add will be the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FROM ruby:2.4-slim&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This not only reduces bloat in our own Docker image, but saves local disk space and bandwidth.&lt;/p&gt;

&lt;p&gt;Next we will install any additional packages we need for our project.  As my rails app makes use of Postgres as it&amp;rsquo;s database, I will need to install the &lt;code&gt;libpq-dev&lt;/code&gt; package in order to compile the postgres extensions needed by the &lt;code&gt;pg&lt;/code&gt; gem.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y build-essential git libpq-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;RUN&lt;/code&gt; command tells Docker that you want to run a command within the image.&lt;/p&gt;

&lt;p&gt;After this, we will tell Docker which folder to mount our app in and copy the contents of our project across.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ENV app /app
RUN mkdir $app
WORKDIR $app
COPY . $app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we are going to set the &lt;code&gt;BUNDLE_PATH&lt;/code&gt; to a custom location so that Bundler will install them in an external location.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENV BUNDLE_PATH /gems&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We do this as Docker images are stateless, and we do not want to be reinstalling our Gems every time we make some changes to our image.  Why do we point this to &lt;code&gt;/gems&lt;/code&gt; and how does this become an external location you might ask.  More will be revealed in the next section on Docker Compose.&lt;/p&gt;

&lt;p&gt;Your final &lt;code&gt;Dockerfile&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ruby:2.4-slim

# Install basic packages
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y build-essential git libpq-dev

ENV app /app
RUN mkdir $app
WORKDIR $app
ADD . $app

ENV BUNDLE_PATH /gems
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Docker Compose&lt;/h3&gt;

&lt;p&gt;Docker Compose is a service provided by Docker as part of the installation as a means of booting and managing multiple Docker images at the same time, all in one place.&lt;/p&gt;

&lt;h4&gt;Development docker-compose file&lt;/h4&gt;

&lt;p&gt;To configure Docker Compose we need to create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file within the root of our project directory.  As can be determined from the extension, the file makes use of YAML.&lt;/p&gt;

&lt;p&gt;For the purpose of this article, we will be making use of version 2.1 of the Docker Compose syntax.  This should be defined at the top of the file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;version: &amp;#39;2.1&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After this, we can now start to define our services.  This is the section in which we list which images we are going to be using for the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;services:&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;Ruby app&lt;/h5&gt;

&lt;p&gt;First lets define our Ruby app service.  We are naming the service &lt;code&gt;web&lt;/code&gt; as it is our Rails app. Then we tell Docker to build the image from our root directory and save it as an image called &lt;code&gt;app&lt;/code&gt;.  Docker compose will then make use of our &lt;code&gt;Dockerfile&lt;/code&gt; that we defined earlier in order to build our &lt;code&gt;web&lt;/code&gt; service.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  web:
    build: .
    image: app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the image has been built, we want to reuse it later for our Sidekiq instance, otherwise Docker will try to rebuild it again, which is just a waste of resources.&lt;/p&gt;

&lt;p&gt;Next we are going to tell Docker what command to run once the image has been built and booted up.  In this instance, we want to install our gems and then boot up puma.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;command: bash -c &amp;quot;bundle install &amp;amp;&amp;amp; bundle exec puma -p 3000 -C config/puma.rb&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; By using &lt;code&gt;bash -c&lt;/code&gt; as the command, we can then pass more than one linux command to our service.&lt;/p&gt;

&lt;p&gt;Thirdly, we need to let Docker know to mount the root directory of our app to the &lt;code&gt;/app&lt;/code&gt; folder that we defined in the &lt;code&gt;Dockerfile&lt;/code&gt; previously.  We are also going to define the &lt;code&gt;gem_cache&lt;/code&gt; volume pointing to &lt;code&gt;/gems&lt;/code&gt; that we talked about earlier in order to store our installed Gems into.  Then we need to map our Puma port &lt;code&gt;3000&lt;/code&gt; to the outside world, in this case we will leave it as &lt;code&gt;3000&lt;/code&gt; to keep things simple.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  volumes:
      - .:/app
      - gem_cache:/gems
    ports:
      - '3000:3000'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to define the environment variables needed for our app, in this instance Postgres and Redis.  &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   environment: &amp;amp;default_environment
      DATABASE_URL: 'postgres://postgres:@postgres:5432'
      REDIS_URL: 'redis://redis:6379'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Docker provides us with some pretty cool features, like giving us unique schemas such as &lt;code&gt;postgres://&lt;/code&gt; and &lt;code&gt;redis://&lt;/code&gt; and then translates them to the proper URI needed for the service.&lt;/p&gt;

&lt;p&gt;Finally, we let Docker know that we rely on a couple more services to boot up before we can boot our image, otherwise it will complain that such services do not exist.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    depends_on:
      - postgres
      - redis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Up to this point our &lt;code&gt;docker-compose.yml&lt;/code&gt; should look like the following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '2.1'

services:
  web:
    build: .
    image: app
    command: bash -c "bundle install &amp;amp;&amp;amp; bundle exec puma -p 3000 -C config/puma.rb"
    volumes:
      - .:/app
      - gem_cache:/gems
    ports:
      - '3000:3000'
    environment: &amp;amp;default_environment
      DATABASE_URL: 'postgres://postgres:@postgres:5432'
      REDIS_URL: 'redis://redis:6379'
    depends_on:
      - postgres
      - redis
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;Sidekiq instance&lt;/h5&gt;

&lt;p&gt;As Sidekiq essentially requires the same environment as our web app, we will use the same settings as our we service, but with a few tweaks.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  expence_sidekiq:
    image: app
    command: bundle exec sidekiq -c 5 -q critical -q default
    volumes:
      - .:/app
      - gem_cache:/gems
    environment:
      &amp;lt;&amp;lt;: *default_environment
    depends_on:
      - postgres
      - redis
      - web
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only differences here is that we use the &lt;code&gt;app&lt;/code&gt; image that we built previously, run a different command, inherit the environment variables we just defined and then also wait until our &lt;code&gt;web&lt;/code&gt; service has been booted until we boot up Sidekiq.&lt;/p&gt;

&lt;h5&gt;Postgres&lt;/h5&gt;

&lt;p&gt;For Postgres, we are again going to use an official image from Docker Hub and then explicitly state which version we would like to use.  Finally, we are going to expose the default port in which it runs on, only internally this time as we do not want it to be exposed to the outside world.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  postgres:
    image: postgres:9.5
    ports:
      - '5432'
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;Redis&lt;/h5&gt;

&lt;p&gt;Redis is much the same again, exposing it&amp;rsquo;s default port internally.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  redis:
    image: redis:3.2
    ports:
      - '6379'
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;Volumes&lt;/h5&gt;

&lt;p&gt;For storing our Gem files, we are going to use the volumes directive.  Volumes are defined at the root level of our &lt;code&gt;docker-compose&lt;/code&gt; file.  Volumes, at the very least, allow us to define persistent storage locations so that we can access data again leter, even after our containers have been destoye. &lt;/p&gt;

&lt;p&gt;Here we are only going to be using it for our gems.  You might also add more volumes to store postgres and redis data for example.  We will do exactly that in part 2 of the series for our production environment.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;volumes:
  gem_cache:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now have the following complete &lt;code&gt;docker-compose.yml&lt;/code&gt; file in your root directory:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '2.1'

services:
  web:
    build: .
    image: app
    command: bash -c "bundle install &amp;amp;&amp;amp; bundle exec puma -p 3000 -C config/puma.rb"
    volumes:
      - .:/app
      - gem_cache:/gems
    ports:
      - '3000:3000'
    environment: &amp;amp;default_environment
      DATABASE_URL: 'postgres://postgres:@postgres:5432'
      REDIS_URL: 'redis://redis:6379'
    depends_on:
      - postgres
      - redis

  sidekiq:
    image: app
    command: bundle exec sidekiq -c 5 -q critical -q default
    volumes:
      - .:/app
      - gem_cache:/gems
    environment:
      &amp;lt;&amp;lt;: *default_environment
    depends_on:
      - postgres
      - redis
      - web

  postgres:
    image: postgres:9.5
    ports:
      - '5432'

  redis:
    image: redis:3.2
    ports:
      - '6379'

volumes:
  gem_cache:
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Scripts&lt;/h3&gt;

&lt;p&gt;In order to make our lives a little easier, we are going to set up some scripts, rather than type out numerous commands each time we want to do something.&lt;/p&gt;

&lt;p&gt;These will be Bash scripts and we can save them in our app directly under the folder &lt;code&gt;./bin/docker/&lt;/code&gt; for clarity.&lt;/p&gt;

&lt;h4&gt;Boot&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/boot&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, let&amp;rsquo;s set up a boot script so that we can start our app quickly and easily.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# spin up our image&lt;/span&gt;
docker-compose up --build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells &lt;code&gt;docker-compose&lt;/code&gt; to boot up our images from our &lt;code&gt;docker-compose.yml&lt;/code&gt; file.  However, we also need to pass the &lt;code&gt;--build&lt;/code&gt; flag as our &lt;code&gt;app&lt;/code&gt; image needs to be built first before we can spin it up.&lt;/p&gt;

&lt;p&gt;Once the image is built and bundler has installed our Gems and booted up, Docker will then spin up Sidekiq, Redis and Postgres.&lt;/p&gt;

&lt;p&gt;At this point, your app will now be available at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, as we are using Postgres as our DB, Rails is going to complain that the database does not exist.  So let&amp;rsquo;s prep some more scripts to allow us to do so in a convenient fashion.&lt;/p&gt;

&lt;h4&gt;Docker&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/docker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The rest of our scripts are going to rely on this &lt;code&gt;docker&lt;/code&gt; script as an entry point into our &lt;code&gt;web&lt;/code&gt; image so that we can run the commands necessary inside it.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
docker-compose run web &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$@&lt;/code&gt; in this instance will pick up any arguments we pass to &lt;code&gt;./bin/docker/docker&lt;/code&gt; and pass them through to &lt;code&gt;docker-compose&lt;/code&gt; and to the &lt;code&gt;web&lt;/code&gt; service.&lt;/p&gt;

&lt;h4&gt;Bundle&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/bundle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our &lt;code&gt;docker&lt;/code&gt; script in place, we can reuse that whenever we need to run any additional commands.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
./bin/docker/docker bundle &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Rake&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/rake&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly, our &lt;code&gt;bundle&lt;/code&gt; script can be reused for running any other commands through Bundler.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
./bin/docker/bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have &lt;code&gt;rake&lt;/code&gt; in place, we can use this to create and migrate our database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/rake db:create&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will probably find that Rails crashes after it has created the development database when trying to create the test db.  This can be safely ignored.  When you come to creating and migrating the test db, this can be done with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/rake db:create RAILS_ENV=test&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Console&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/console&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
./bin/docker/bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails console &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Test&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;./bin/docker/test&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; ./bin/docker/bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rspec &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could use the same &lt;code&gt;bundle&lt;/code&gt; pattern for writing any other scripts that you might need to use within your Docker instance, such as Rails itself for quickly generating migrations, etc.&lt;/p&gt;

&lt;h3&gt;Docker Series&lt;/h3&gt;

&lt;p&gt;I hope you have enjoyed this simple article on the basics of using Docker for development.  If you find any errors / alternative approaches, then please let me know in the comments below.&lt;/p&gt;

&lt;p&gt;This is just part one of my Docker series, I will be following this article up with how to use Docker in production and also how this process can be automated for quick deployments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using Docker for Development&lt;/li&gt;
&lt;li&gt;Using Docker for Production&lt;/li&gt;
&lt;li&gt;Docker Automation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Rails 5 Caveats&lt;/h3&gt;

&lt;p&gt;If you are using Rails 5 then you might find that your code is not being reloaded after you save a file. This is due to how live reloading has changed and doesn&amp;rsquo;t seem to work in Docker currently.&lt;/p&gt;

&lt;p&gt;However, this can be changed to work in the way Rails 4 hot reloads by changing the &lt;code&gt;file-watcher&lt;/code&gt; Class within your &lt;code&gt;development.rb&lt;/code&gt; with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.file_watcher = ActiveSupport::FileUpdateChecker&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;p&gt;Below are some references which I have used in the past to build up my understanding of Docker and are great resources in themselves.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fbzga/how-to-cache-bundle-install-with-docker-7bed453a5800#.pla68urub"&gt;How to Cache Bundle Install with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/rails/issues/25186"&gt;Code is not reloaded in dev with Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Polling for File Generation</title>
    <link rel="alternate" href="http://blog.url.com/2015/12/08/polling-for-file-generation.html"/>
    <id>http://blog.url.com/2015/12/08/polling-for-file-generation.html</id>
    <published>2015-12-08T00:00:00+00:00</published>
    <updated>2017-02-08T18:41:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;Background of the Problem&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Image of Orders Table" src="/images/orders-cc4e859b.png" /&gt;
&lt;em&gt;A list of orders&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We are currently generating a CSV of orders for a vendor; which at the moment isn&amp;rsquo;t a big problem as we do not have many vendors, or many orders, so the CSV will generate relatively quickly.   &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrdersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="c1"&gt;#...&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_csv&lt;/span&gt;
    &lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;order_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

    &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Address"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"City"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"County"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Postcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Email"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;county&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;send_file&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, we know that suppliers and orders are bound to increase, therefore we need to find a better solution for generating files which will scale without blocking our precious ruby processes.&lt;/p&gt;

&lt;p&gt;Obviously, this is where workers come in to do all the heavy lifting. By putting this work in a background process, we can free up our ruby processes again.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrdersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="c1"&gt;#...&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_csv&lt;/span&gt;
    &lt;span class="no"&gt;GenerateCSVJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:order_ids&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# Code to send file back to user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, how can I tell the controller that the file has finished being generated so that it can be sent back to the user?&lt;/p&gt;

&lt;h3&gt;The Implementation&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s at this point that we need to do some polling, and the purpose of writing this article. &lt;/p&gt;

&lt;p&gt;Now that we have the controller calling the worker to generate the file we need a way of tracking the file generated.  As we are not using a model for this we don&amp;rsquo;t have any handy IDs to keep track, this is where I like to use timestamps instead.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'csv'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GenerateCSVJob&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Worker&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;order_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Address"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"City"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"County"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Postcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Email"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;county&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a unique way of identifying the file we have just generated, we have a clear way of identifying the file, in order to pass it back to the user.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrdersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="c1"&gt;#...&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_csv&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;

    &lt;span class="no"&gt;GenerateCSVJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:order_ids&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;send_file&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it is much cleaner if we just send back the entire URL for them to poll instead.  At this point, that I want to clean up the &lt;code&gt;OrdersController&lt;/code&gt; and move the logic into it&amp;rsquo;s own controller instead.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CSVExportsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;

    &lt;span class="no"&gt;GenerateCSVJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:order_ids&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;csv_export_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
                           &lt;span class="ss"&gt;status: :ok&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to add an action to check whether the file exists yet or not, and if it does, then send it back to the user.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CSVExportsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="n"&gt;send_file&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I prefer to send a link back to the user which they can then use to download the file whenever they want.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CSVExportsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;csv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;file: &lt;/span&gt;&lt;span class="n"&gt;csv_export_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;format: :csv&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But of course, none of this will work without the Ajax to marry it all up.&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;# Provide some context to the user so they know what is happening after we submit the form&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'button[data-behavior="generate_csv"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;click&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'button[data-behavior="generate_csv"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div[data-behavior="generating_csv"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'form[data-attribute="generate_csv_form"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt; &lt;span class="s"&gt;'ajax:success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;# Uncheck the checkboxes&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input:checkbox'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'checked'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# This will be our URL to check if the file exists&lt;/span&gt;
      &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;

      &lt;span class="c1"&gt;# Set up our polling object&lt;/span&gt;
      &lt;span class="nx"&gt;poll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="c1"&gt;# If the file does not exist yet, try again&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
          &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="c1"&gt;# Now that the file exists, populate the download link with the download URL and then show it&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div[data-behavior="generating_csv"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a[data-attribute="download_csv_link"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div[data-behavior="download_csv"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="c1"&gt;# Start polling csv_export_path to see if the file exists yet&lt;/span&gt;
      &lt;span class="nx"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;jQuery&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about sending a URL back rather than just the file, is that we can add other formats to the &lt;code&gt;respond_to&lt;/code&gt; block, if we ever need to generate other types of files. For example a PDF of order labels for the supplier to print and stick on their orders.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileExportsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;file_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:file_type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# CSV, PDF, etc&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file_type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_order.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file_type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;file: &lt;/span&gt;&lt;span class="n"&gt;file_export_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;format: &lt;/span&gt;&lt;span class="n"&gt;file_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                           &lt;span class="ss"&gt;file_type: &lt;/span&gt;&lt;span class="n"&gt;file_type&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you know of an alternative appraoch to achieving the same result, then please let me know in the comments below.&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;p&gt;An example project with all the relavent code can be found under my &lt;a href="https://github.com/krisquigley/poll-worker-for-changes"&gt;github&lt;/a&gt; account.&lt;/p&gt;
</content>
  </entry>
</feed>

          <div class="col-xs-12 col-sm-3 col-sm-push-1 site__aside">
  <aside>
    <img class="site__aside__image" src="/images/profile-5a641126.jpg" />
    <p>I'm Kris, a Ruby on Rails dev and father based in Leeds.</p>
    <p>I am currently the lead developer at <a href="http://direct.matalan.co.uk">Matalan Direct</a> and offer my services to Charities and Non-Profits through <a href="http://affinity-tech.com">affinity tech.</a></p>
  </aside>
</div>

        </div>
      </main>
      <hr/>
<footer class="site__footer">
  &copy; 2017 Kris Quigley
</footer>
    </div>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-90707602-1', 'auto');
      ga('send', 'pageview');

    </script>
  </body>
</html>